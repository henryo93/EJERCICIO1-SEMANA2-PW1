// Calculadora de √Årea de Rect√°ngulo
// Autor: Sistema de Calculadora
// Descripci√≥n: Aplicaci√≥n para calcular el √°rea de un rect√°ngulo con validaciones

class RectanguloCalculadora {
    constructor() {
        // Elementos del DOM
        this.baseInput = document.getElementById('base');
        this.alturaInput = document.getElementById('altura');
        this.btnCalcular = document.getElementById('btnCalcular');
        this.btnLimpiar = document.getElementById('btnLimpiar');
        this.resultContainer = document.getElementById('resultContainer');
        this.resultado = document.getElementById('resultado');
        
        // Inicializar eventos
        this.inicializarAplicacion();
    }
    
    /**
     * Inicializa todos los event listeners de la aplicaci√≥n
     */
    inicializarAplicacion() {
        // Evento click para calcular
        this.btnCalcular.addEventListener('click', () => this.calcularArea());
        
        // Evento click para limpiar
        this.btnLimpiar.addEventListener('click', () => this.limpiarFormulario());
        
        // Permitir c√°lculo con Enter en los campos de entrada
        this.baseInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.calcularArea();
        });
        
        this.alturaInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.calcularArea();
        });
        
        // Validaci√≥n en tiempo real (opcional: solo permitir n√∫meros)
        this.baseInput.addEventListener('input', (e) => this.validarNumeroEnTiempoReal(e));
        this.alturaInput.addEventListener('input', (e) => this.validarNumeroEnTiempoReal(e));
    }
    
    /**
     * Valida que solo se ingresen n√∫meros y puntos decimales
     * @param {Event} e - Evento de input
     */
    validarNumeroEnTiempoReal(e) {
        const valor = e.target.value;
        // Permitir solo n√∫meros, punto decimal y signo negativo al inicio
        const regex = /^-?\d*\.?\d*$/;
        
        if (!regex.test(valor)) {
            e.target.value = valor.slice(0, -1); // Eliminar √∫ltimo caracter inv√°lido
        }
    }
    
    /**
     * Realiza todas las validaciones necesarias antes del c√°lculo
     * @param {string} base - Valor de la base
     * @param {string} altura - Valor de la altura
     * @returns {boolean} - True si las validaciones pasan, false en caso contrario
     */
    validarEntradas(base, altura) {
        // Verificar que los campos no est√©n vac√≠os
        if (base.trim() === '' || altura.trim() === '') {
            this.mostrarAlerta('warning', '‚ö†Ô∏è Campos vac√≠os', 
                'Por favor, completa todos los campos antes de calcular.');
            return false;
        }
        
        // Verificar que sean n√∫meros v√°lidos
        const baseNum = parseFloat(base);
        const alturaNum = parseFloat(altura);
        
        if (isNaN(baseNum) || isNaN(alturaNum)) {
            this.mostrarAlerta('error', '‚ùå Valores inv√°lidos', 
                'Por favor, ingresa solo n√∫meros v√°lidos en los campos.');
            return false;
        }
        
        // Verificar que sean n√∫meros positivos
        if (baseNum <= 0 || alturaNum <= 0) {
            this.mostrarAlerta('error', '‚ùå N√∫meros negativos o cero', 
                'Los valores deben ser n√∫meros positivos mayores que cero.');
            return false;
        }
        
        // Verificar que no sean n√∫meros excesivamente grandes
        if (baseNum > 1000000 || alturaNum > 1000000) {
            this.mostrarAlerta('warning', '‚ö†Ô∏è N√∫meros muy grandes', 
                'Por favor, ingresa valores m√°s peque√±os para un c√°lculo preciso.');
            return false;
        }
        
        return true;
    }
    
    /**
     * Funci√≥n principal que calcula el √°rea del rect√°ngulo
     */
    calcularArea() {
        const base = this.baseInput.value;
        const altura = this.alturaInput.value;
        
        // Realizar validaciones
        if (!this.validarEntradas(base, altura)) {
            return;
        }
        
        // Convertir a n√∫meros
        const baseNum = parseFloat(base);
        const alturaNum = parseFloat(altura);
        
        // F√≥rmula: √Årea = base * altura
        const area = baseNum * alturaNum;
        
        // Redondear a 2 decimales para evitar problemas de precisi√≥n
        const areaRedondeada = Math.round(area * 100) / 100;
        
        // Mostrar resultado
        this.mostrarResultado(areaRedondeada, baseNum, alturaNum);
        
        // Mostrar mensaje de √©xito
        this.mostrarAlerta('success', '‚úÖ ¬°C√°lculo exitoso!', 
            `El √°rea del rect√°ngulo es ${areaRedondeada} cm¬≤`, true);
    }
    
    /**
     * Muestra el resultado del c√°lculo en la interfaz
     * @param {number} area - √Årea calculada
     * @param {number} base - Base utilizada
     * @param {number} altura - Altura utilizada
     */
    mostrarResultado(area, base, altura) {
        this.resultado.innerHTML = `
            <strong>Resultado:</strong><br>
            Base: ${base} cm | Altura: ${altura} cm<br>
            <span class="fs-4">√Årea = ${area} cm¬≤</span>
        `;
        
        this.resultContainer.style.display = 'block';
        
        // Animaci√≥n suave para mostrar el resultado
        this.resultContainer.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'nearest' 
        });
    }
    
    /**
     * Limpia todos los campos del formulario y oculta el resultado
     */
    limpiarFormulario() {
        this.baseInput.value = '';
        this.alturaInput.value = '';
        this.resultContainer.style.display = 'none';
        
        // Enfocar el primer campo
        this.baseInput.focus();
        
        // Mostrar mensaje de confirmaci√≥n
        this.mostrarAlerta('info', 'üßπ Formulario limpiado', 
            'Todos los campos han sido borrados.', true);
    }
    
    /**
     * Muestra alertas usando SweetAlert2
     * @param {string} tipo - Tipo de alerta (success, error, warning, info)
     * @param {string} titulo - T√≠tulo de la alerta
     * @param {string} texto - Texto de la alerta
     * @param {boolean} autoClose - Si la alerta se cierra autom√°ticamente
     */
    mostrarAlerta(tipo, titulo, texto, autoClose = false) {
        const colores = {
            success: '#28a745',
            error: '#dc3545',
            warning: '#ffc107',
            info: '#17a2b8'
        };
        
        const configuracion = {
            icon: tipo,
            title: titulo,
            text: texto,
            confirmButtonText: tipo === 'success' ? 'Perfecto' : 'Entendido',
            confirmButtonColor: colores[tipo] || '#667eea'
        };
        
        if (autoClose) {
            configuracion.timer = 3000;
            configuracion.timerProgressBar = true;
        }
        
        Swal.fire(configuracion);
    }
    
    /**
     * M√©todo para obtener estad√≠sticas de uso (funcionalidad adicional)
     */
    obtenerEstadisticas() {
        return {
            version: '1.0.0',
            autor: 'Sistema de Calculadora',
            descripcion: 'Calculadora de √°rea de rect√°ngulo con validaciones avanzadas'
        };
    }
}

// Inicializar la calculadora cuando el DOM est√© completamente cargado
document.addEventListener('DOMContentLoaded', function() {
    // Crear instancia de la calculadora
    const calculadora = new RectanguloCalculadora();
    
    // Enfocar el primer campo al cargar la p√°gina
    document.getElementById('base').focus();
    
    // Mostrar mensaje de bienvenida (opcional)
    console.log('üî¢ Calculadora de √Årea de Rect√°ngulo inicializada correctamente');
    console.log('üìä Estad√≠sticas:', calculadora.obtenerEstadisticas());
});

// Hacer la clase disponible globalmente si es necesario
window.RectanguloCalculadora = RectanguloCalculadora;